// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	item "projects/features/item"

	mock "github.com/stretchr/testify/mock"
)

// ItemData is an autogenerated mock type for the ItemData type
type ItemData struct {
	mock.Mock
}

// Add provides a mock function with given fields: userID, newItem
func (_m *ItemData) Add(userID int, newItem item.Core) (item.Core, error) {
	ret := _m.Called(userID, newItem)

	var r0 item.Core
	if rf, ok := ret.Get(0).(func(int, item.Core) item.Core); ok {
		r0 = rf(userID, newItem)
	} else {
		r0 = ret.Get(0).(item.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, item.Core) error); ok {
		r1 = rf(userID, newItem)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: userID, itemID
func (_m *ItemData) Delete(userID int, itemID int) error {
	ret := _m.Called(userID, itemID)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(userID, itemID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllItems provides a mock function with given fields:
func (_m *ItemData) GetAllItems() ([]item.Core, error) {
	ret := _m.Called()

	var r0 []item.Core
	if rf, ok := ret.Get(0).(func() []item.Core); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]item.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetID provides a mock function with given fields: ItemID
func (_m *ItemData) GetID(ItemID int) (item.Core, error) {
	ret := _m.Called(ItemID)

	var r0 item.Core
	if rf, ok := ret.Get(0).(func(int) item.Core); ok {
		r0 = rf(ItemID)
	} else {
		r0 = ret.Get(0).(item.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(ItemID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MyItem provides a mock function with given fields: userID
func (_m *ItemData) MyItem(userID int) ([]item.Core, error) {
	ret := _m.Called(userID)

	var r0 []item.Core
	if rf, ok := ret.Get(0).(func(int) []item.Core); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]item.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: userID, itemID, updatedData
func (_m *ItemData) Update(userID int, itemID int, updatedData item.Core) (item.Core, error) {
	ret := _m.Called(userID, itemID, updatedData)

	var r0 item.Core
	if rf, ok := ret.Get(0).(func(int, int, item.Core) item.Core); ok {
		r0 = rf(userID, itemID, updatedData)
	} else {
		r0 = ret.Get(0).(item.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, item.Core) error); ok {
		r1 = rf(userID, itemID, updatedData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewItemData interface {
	mock.TestingT
	Cleanup(func())
}

// NewItemData creates a new instance of ItemData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewItemData(t mockConstructorTestingTNewItemData) *ItemData {
	mock := &ItemData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
