// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	item "projects/features/item"

	mock "github.com/stretchr/testify/mock"

	multipart "mime/multipart"
)

// ItemService is an autogenerated mock type for the ItemService type
type ItemService struct {
	mock.Mock
}

// Add provides a mock function with given fields: token, newItem, image
func (_m *ItemService) Add(token interface{}, newItem item.Core, image *multipart.FileHeader) (item.Core, error) {
	ret := _m.Called(token, newItem, image)

	var r0 item.Core
	if rf, ok := ret.Get(0).(func(interface{}, item.Core, *multipart.FileHeader) item.Core); ok {
		r0 = rf(token, newItem, image)
	} else {
		r0 = ret.Get(0).(item.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, item.Core, *multipart.FileHeader) error); ok {
		r1 = rf(token, newItem, image)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: token, itemID
func (_m *ItemService) Delete(token interface{}, itemID int) error {
	ret := _m.Called(token, itemID)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, int) error); ok {
		r0 = rf(token, itemID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllProducts provides a mock function with given fields:
func (_m *ItemService) GetAllProducts() ([]item.Core, error) {
	ret := _m.Called()

	var r0 []item.Core
	if rf, ok := ret.Get(0).(func() []item.Core); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]item.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductByID provides a mock function with given fields: token, productID
func (_m *ItemService) GetProductByID(token interface{}, productID int) (item.Core, error) {
	ret := _m.Called(token, productID)

	var r0 item.Core
	if rf, ok := ret.Get(0).(func(interface{}, int) item.Core); ok {
		r0 = rf(token, productID)
	} else {
		r0 = ret.Get(0).(item.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, int) error); ok {
		r1 = rf(token, productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MyProducts provides a mock function with given fields: token
func (_m *ItemService) MyProducts(token interface{}) ([]item.Core, error) {
	ret := _m.Called(token)

	var r0 []item.Core
	if rf, ok := ret.Get(0).(func(interface{}) []item.Core); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]item.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: token, itemID, updatedData, image
func (_m *ItemService) Update(token interface{}, itemID int, updatedData item.Core, image *multipart.FileHeader) (item.Core, error) {
	ret := _m.Called(token, itemID, updatedData, image)

	var r0 item.Core
	if rf, ok := ret.Get(0).(func(interface{}, int, item.Core, *multipart.FileHeader) item.Core); ok {
		r0 = rf(token, itemID, updatedData, image)
	} else {
		r0 = ret.Get(0).(item.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, int, item.Core, *multipart.FileHeader) error); ok {
		r1 = rf(token, itemID, updatedData, image)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewItemService interface {
	mock.TestingT
	Cleanup(func())
}

// NewItemService creates a new instance of ItemService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewItemService(t mockConstructorTestingTNewItemService) *ItemService {
	mock := &ItemService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
