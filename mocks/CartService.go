// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	cart "projects/features/cart"

	mock "github.com/stretchr/testify/mock"
)

// CartService is an autogenerated mock type for the CartService type
type CartService struct {
	mock.Mock
}

// Add provides a mock function with given fields: token, newCart
func (_m *CartService) Add(token interface{}, newCart cart.Core) (cart.Core, error) {
	ret := _m.Called(token, newCart)

	var r0 cart.Core
	if rf, ok := ret.Get(0).(func(interface{}, cart.Core) cart.Core); ok {
		r0 = rf(token, newCart)
	} else {
		r0 = ret.Get(0).(cart.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, cart.Core) error); ok {
		r1 = rf(token, newCart)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCartService interface {
	mock.TestingT
	Cleanup(func())
}

// NewCartService creates a new instance of CartService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCartService(t mockConstructorTestingTNewCartService) *CartService {
	mock := &CartService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
